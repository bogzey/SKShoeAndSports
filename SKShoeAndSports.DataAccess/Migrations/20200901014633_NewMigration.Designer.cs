// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SKShoeAndSports.DataAccess.Data;

namespace SKShoeAndSports.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200901014633_NewMigration")]
    partial class NewMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SKShoeAndSports.Models.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("SKShoeAndSports.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Skechers"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Wrangler"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Umbro"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Canterbury"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hype"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Aasics"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Susst"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Oaktrack"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Outrage"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Remonte"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Marco Tozzi"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Lunar Sandals"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Reiker"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Sponge"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Zanni"
                        });
                });

            modelBuilder.Entity("SKShoeAndSports.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Men"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Women"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Children"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Schoolwear"
                        });
                });

            modelBuilder.Entity("SKShoeAndSports.Models.Colour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Colours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 7,
                            Name = "White"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Grey"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Brown"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Grey"
                        });
                });

            modelBuilder.Entity("SKShoeAndSports.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SKShoeAndSports.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCarrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("SKShoeAndSports.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            Description = "Suitable for astroturf, 3G",
                            ImageUrl = "/images/products/predator.jpg",
                            Name = "Predator",
                            Price = 60m,
                            ProductTypeId = 1,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CategoryId = 1,
                            Description = "Suitable for astroturf, 3G",
                            ImageUrl = "/images/products/joga.jpg",
                            Name = "Joga",
                            Price = 60m,
                            ProductTypeId = 1,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 13,
                            CategoryId = 1,
                            Description = "Bootcut Jeans",
                            ImageUrl = "/images/products/bootcut.jpg",
                            Name = "Bootcut",
                            Price = 60m,
                            ProductTypeId = 14,
                            Quantity = 0,
                            SubcategoryId = 7
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 12,
                            CategoryId = 1,
                            Description = "Perfect for outdoors",
                            ImageUrl = "/images/products/boots.jpg",
                            Name = "Boots",
                            Price = 60m,
                            ProductTypeId = 9,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 6,
                            CategoryId = 1,
                            Description = "Comic strip football boots",
                            ImageUrl = "/images/products/comics.jpg",
                            Name = "Comics",
                            Price = 60m,
                            ProductTypeId = 1,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 11,
                            CategoryId = 1,
                            Description = "Comfortable streamlined fit",
                            ImageUrl = "/images/products/loafers.jpg",
                            Name = "Loafers",
                            Price = 60m,
                            ProductTypeId = 9,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 17,
                            CategoryId = 2,
                            Description = "Slip on trainers",
                            ImageUrl = "/images/products/slipons.jpg",
                            Name = "Slip-Ons",
                            Price = 60m,
                            ProductTypeId = 6,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 17,
                            CategoryId = 2,
                            Description = "Zippped Trainers",
                            ImageUrl = "/images/products/zipps.jpg",
                            Name = "Zipps",
                            Price = 60m,
                            ProductTypeId = 5,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 17,
                            CategoryId = 2,
                            Description = "Silver zipped trainers",
                            ImageUrl = "/images/products/silvers2.jpg",
                            Name = "Silvers",
                            Price = 60m,
                            ProductTypeId = 5,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 17,
                            CategoryId = 2,
                            Description = "Snake patterned heels with strap",
                            ImageUrl = "/images/products/snake.jpg",
                            Name = "Snake Eater",
                            Price = 60m,
                            ProductTypeId = 4,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 10,
                            CategoryId = 2,
                            Description = "Trainers with a comfortable gel sole",
                            ImageUrl = "/images/products/gel.jpg",
                            Name = "Gel Saviour",
                            Price = 60m,
                            ProductTypeId = 5,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 17,
                            CategoryId = 2,
                            Description = "Trainers with a platform sole",
                            ImageUrl = "/images/products/platform.jpg",
                            Name = "Platform Push",
                            Price = 60m,
                            ProductTypeId = 5,
                            Quantity = 0,
                            SubcategoryId = 5
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 18,
                            CategoryId = 2,
                            Description = "Comfortable ergonomic slip-ons",
                            ImageUrl = "/images/products/slippy.jpg",
                            Name = "Slippy Slip",
                            Price = 60m,
                            ProductTypeId = 5,
                            Quantity = 0,
                            SubcategoryId = 5
                        });
                });

            modelBuilder.Entity("SKShoeAndSports.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Football Boots"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sandals"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Heels"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Trainers"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ballerinas"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Slippers"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brogues"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Coat"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Joggers"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Jumpers"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Polos"
                        },
                        new
                        {
                            Id = 13,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Shirts"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Schoolbag"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Jackets"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Hoodies"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Vests"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Tracksuits"
                        });
                });

            modelBuilder.Entity("SKShoeAndSports.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("ColourId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<bool>("isDiscount")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColourId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColourId = 2,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 1,
                            Quantity = 12,
                            SizeId = 10,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 2,
                            ColourId = 2,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 2,
                            Quantity = 20,
                            SizeId = 11,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 3,
                            ColourId = 3,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 3,
                            Quantity = 15,
                            SizeId = 12,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 4,
                            ColourId = 2,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 4,
                            Quantity = 10,
                            SizeId = 10,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 5,
                            ColourId = 1,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 5,
                            Quantity = 11,
                            SizeId = 11,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 6,
                            ColourId = 4,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 6,
                            Quantity = 12,
                            SizeId = 10,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 7,
                            ColourId = 3,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 7,
                            Quantity = 13,
                            SizeId = 11,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 8,
                            ColourId = 5,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 8,
                            Quantity = 14,
                            SizeId = 12,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 9,
                            ColourId = 5,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 9,
                            Quantity = 15,
                            SizeId = 13,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 10,
                            ColourId = 4,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 10,
                            Quantity = 16,
                            SizeId = 10,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 11,
                            ColourId = 3,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 11,
                            Quantity = 11,
                            SizeId = 11,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 12,
                            ColourId = 5,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 12,
                            Quantity = 12,
                            SizeId = 12,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 13,
                            ColourId = 5,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 13,
                            Quantity = 13,
                            SizeId = 13,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 14,
                            ColourId = 4,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 13,
                            Quantity = 14,
                            SizeId = 14,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 15,
                            ColourId = 3,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 13,
                            Quantity = 15,
                            SizeId = 15,
                            isDiscount = false
                        },
                        new
                        {
                            Id = 16,
                            ColourId = 5,
                            DiscountPrice = 0m,
                            Price = 50m,
                            ProductId = 13,
                            Quantity = 15,
                            SizeId = 16,
                            isDiscount = false
                        });
                });

            modelBuilder.Entity("SKShoeAndSports.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "XS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "S"
                        },
                        new
                        {
                            Id = 3,
                            Name = "M"
                        },
                        new
                        {
                            Id = 4,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 5,
                            Name = "L"
                        },
                        new
                        {
                            Id = 6,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = 7,
                            Name = "1"
                        },
                        new
                        {
                            Id = 8,
                            Name = "2"
                        },
                        new
                        {
                            Id = 9,
                            Name = "3"
                        },
                        new
                        {
                            Id = 10,
                            Name = "4"
                        },
                        new
                        {
                            Id = 11,
                            Name = "5"
                        },
                        new
                        {
                            Id = 12,
                            Name = "6"
                        },
                        new
                        {
                            Id = 13,
                            Name = "7"
                        },
                        new
                        {
                            Id = 14,
                            Name = "8"
                        },
                        new
                        {
                            Id = 15,
                            Name = "9"
                        },
                        new
                        {
                            Id = 16,
                            Name = "10"
                        },
                        new
                        {
                            Id = 17,
                            Name = "11"
                        },
                        new
                        {
                            Id = 18,
                            Name = "12"
                        },
                        new
                        {
                            Id = 19,
                            Name = "13"
                        },
                        new
                        {
                            Id = 20,
                            Name = "14"
                        },
                        new
                        {
                            Id = 21,
                            Name = "15"
                        },
                        new
                        {
                            Id = 22,
                            Name = "16"
                        },
                        new
                        {
                            Id = 23,
                            Name = "17"
                        },
                        new
                        {
                            Id = 24,
                            Name = "18"
                        },
                        new
                        {
                            Id = 25,
                            Name = "19"
                        },
                        new
                        {
                            Id = 26,
                            Name = "20"
                        },
                        new
                        {
                            Id = 27,
                            Name = "21"
                        },
                        new
                        {
                            Id = 28,
                            Name = "22"
                        },
                        new
                        {
                            Id = 29,
                            Name = "23"
                        },
                        new
                        {
                            Id = 30,
                            Name = "24"
                        });
                });

            modelBuilder.Entity("SKShoeAndSports.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAuthorisedStaff")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SKShoeAndSports.Models.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Skirts"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shirts"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tops"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Footwear"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Knitwear"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Outerwear"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sports"
                        });
                });

            modelBuilder.Entity("SKShoeAndSports.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("StaffId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SKShoeAndSports.Models.Basket", b =>
                {
                    b.HasOne("SKShoeAndSports.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SKShoeAndSports.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SKShoeAndSports.Models.OrderDetails", b =>
                {
                    b.HasOne("SKShoeAndSports.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKShoeAndSports.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SKShoeAndSports.Models.OrderHeader", b =>
                {
                    b.HasOne("SKShoeAndSports.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("SKShoeAndSports.Models.Product", b =>
                {
                    b.HasOne("SKShoeAndSports.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKShoeAndSports.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKShoeAndSports.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKShoeAndSports.Models.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SKShoeAndSports.Models.ProductVariant", b =>
                {
                    b.HasOne("SKShoeAndSports.Models.Brand", null)
                        .WithMany("ProductVariants")
                        .HasForeignKey("BrandId");

                    b.HasOne("SKShoeAndSports.Models.Colour", "Colour")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ColourId");

                    b.HasOne("SKShoeAndSports.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKShoeAndSports.Models.Size", "Size")
                        .WithMany("ProductVariants")
                        .HasForeignKey("SizeId");
                });

            modelBuilder.Entity("SKShoeAndSports.Models.ApplicationUser", b =>
                {
                    b.HasOne("SKShoeAndSports.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");
                });
#pragma warning restore 612, 618
        }
    }
}
